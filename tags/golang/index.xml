<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Jakr Hung's Learning Notes</title><link>https://jakrh.github.io/tags/golang/</link><description>Recent content in Golang on Jakr Hung's Learning Notes</description><generator>Hugo</generator><language>zh-Hant-TW</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jakrh.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>軟體工程視角：Golang 優劣勢分析</title><link>https://jakrh.github.io/posts/20250404-golang-pros-cons/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://jakrh.github.io/posts/20250404-golang-pros-cons/</guid><description>&lt;h2 id="前言為現代軟體工程而生">前言：為現代軟體工程而生&lt;/h2>
&lt;p>Golang 是一種由 Google 開發的開源程式語言，以其簡潔、高效和強大的並發能力，在現代軟體工程領域嶄露頭角。有別於許多程式語言，Golang 的創造者們在設計之初，便有意識地在軟體工程的各個環節進行考量，旨在解決 Google 在軟體工程實踐中遇到的實際問題。正如 Rob Pike 在其演講「Go at Google: Language Design in the Service of Software Engineering」中所強調的，Golang 是一種「為軟體工程服務而設計的語言」。&lt;/p></description></item><item><title>在 macOS、Linux 和 WSL 實現高效安裝、升級與靈活管理 Go 版本</title><link>https://jakrh.github.io/posts/20250328-multi-version-go/</link><pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate><guid>https://jakrh.github.io/posts/20250328-multi-version-go/</guid><description>&lt;h2 id="優勢">優勢&lt;/h2>
&lt;ol>
&lt;li>方便升級 Go 版本。&lt;/li>
&lt;li>可安裝多個 Go 版本，方便測試或因應不同專案需要。&lt;/li>
&lt;/ol>
&lt;h2 id="腳本限制">腳本限制&lt;/h2>
&lt;ol>
&lt;li>CPU 只支援 x86-64 或 ARM64，作業系統只支援 macOS、Linux 和 WSL。其他的類 Unix 系統要自行調整 &lt;code>kernel&lt;/code> 與 &lt;code>machine&lt;/code> 變數，安裝包檔名列表可見 &lt;a href="https://go.dev/dl/">https://go.dev/dl/&lt;/a> 。&lt;/li>
&lt;li>Go 版本須大於 1.20，否則切換版本時的安裝路徑會有所不同。&lt;/li>
&lt;/ol>
&lt;h2 id="列出可安裝的-go-版本-只選大於-120-的版本">列出可安裝的 Go 版本 (只選大於 1.20 的版本)&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>瀏覽 &lt;a href="https://github.com/golang/dl">https://github.com/golang/dl&lt;/a>&lt;/p></description></item></channel></rss>