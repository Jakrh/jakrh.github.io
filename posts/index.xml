<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Jakr Hung's Learning Notes</title><link>https://jakrh.github.io/posts/</link><description>Recent content in Posts on Jakr Hung's Learning Notes</description><generator>Hugo</generator><language>zh-Hant-TW</language><lastBuildDate>Wed, 02 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jakrh.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>提升程式碼品質與開發信心的利器：測試驅動開發 (TDD)</title><link>https://jakrh.github.io/posts/20250402-tdd/</link><pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate><guid>https://jakrh.github.io/posts/20250402-tdd/</guid><description>&lt;h2 id="前言善用-tdd-反而能幫你省下更多時間">前言：善用 TDD 反而能幫你省下更多時間&lt;/h2>
&lt;p>面對 debug 與「改 A 壞 B」的連鎖效應，你是否常感時間精力被無情吞噬？儘管時程緊迫時，不寫測試更符合直覺，但事實上，善用它反而能幫公司節省許多隱性的人力與時間成本。然而，傳統的開發後補上測試，在實踐中卻面臨一些限制，導致其優勢沒被完整發揮，這正是測試驅動開發 (Test-Driven Development, TDD) 出現的原因。&lt;/p></description></item><item><title>C語言記憶體操作概念</title><link>https://jakrh.github.io/posts/20250329-c-memory/</link><pubDate>Sat, 29 Mar 2025 00:00:00 +0000</pubDate><guid>https://jakrh.github.io/posts/20250329-c-memory/</guid><description>&lt;h2 id="指標變數">指標變數&lt;/h2>
&lt;p>引用 (Reference)&lt;/p>
&lt;p>在一般變數面前加一個 &lt;code>&amp;amp;&lt;/code> 符號，這時取出的不是值 (value)，而是該值存放在記憶體中的位址 (address)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">123&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;value of x: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, x); &lt;span style="color:#75715e">// 123
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;address of x: %p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>x); &lt;span style="color:#75715e">// 0x7fff210a8b9c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// &amp;amp;x -&amp;gt; reference
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>x; &lt;span style="color:#75715e">// please ignore `long` for now
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;value of y with decimal integer format: %d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, y); &lt;span style="color:#75715e">// 554339228
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;value of y with heximal address format: %p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, y); &lt;span style="color:#75715e">// 0x7fff210a8b9c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>value of x: 123
address of x: 0x7fff210a8b9c
value of y with decimal integer format: 554339228
value of y with heximal address format: 0x7fff210a8b9c
&lt;/code>&lt;/pre>&lt;p>註：在 64 位元機器上，位址佔 64 位元，但 &lt;code>gcc&lt;/code> 的 C &lt;code>int&lt;/code> 只有 32 位元，所以這裡用 &lt;code>long&lt;/code>。(這點看不懂沒關係)&lt;/p></description></item><item><title>在 Mac/Linux/WSL 安裝多版本 Go</title><link>https://jakrh.github.io/posts/20250328-multi-version-go/</link><pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate><guid>https://jakrh.github.io/posts/20250328-multi-version-go/</guid><description>&lt;h2 id="腳本限制">腳本限制&lt;/h2>
&lt;ol>
&lt;li>CPU 只支援 x86-64 或 ARM64， 作業系統只支援 Linux、macOS 以及 WSL。其他的類 Unix 系統要自行調整 &lt;code>kernel&lt;/code> 與 &lt;code>machine&lt;/code> 變數，安裝包檔名列表可見 &lt;a href="https://go.dev/dl/">https://go.dev/dl/&lt;/a> 。&lt;/li>
&lt;li>Go 版本須大於 1.20，否則切換版本時的安裝路徑會有所不同。&lt;/li>
&lt;/ol>
&lt;h2 id="列出可安裝的-go-版本-只選大於-120-的版本">列出可安裝的 Go 版本 (只選大於 1.20 的版本)&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>瀏覽 &lt;a href="https://github.com/golang/dl">https://github.com/golang/dl&lt;/a>&lt;/p></description></item></channel></rss>